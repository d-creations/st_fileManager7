@startuml

class Domain.StorageNode2 {
    string dir
    string name
    void rename(string text)
    void remove()

}


class Domain.FileNode {
}
class Domain.DirectoryNode {
    void createNewFolder()
}

class Domain.EditorControlerAdapter {
    class Exeptions{readError}
    list getFileText(Folder)
    File openFile()
    Folder folderOpen()
    dic[FILES:list;FOLDERS : list] getFilesInFolder(Folder)
    string getFileText(File)
    void handleSaveFile(File)
    void createFolder(name : String,rootFolder : Folder)
    void createFile(name : String,rootFolder : Folder)

    void deleteFileOrFolder(url)
    void renameFileOrFolder(oldurl,newurl)
    void closeApplication()

}



Domain.EditorControlerAdapter -->  DomainViewI.DirectoryNode_EXC_I : use
Domain.EditorControlerAdapter -->  DomainViewI.FileNode_EXC_I : use
Domain.EditorControlerAdapter -->  DomainViewI.StorageNode2_EXC_I : use
Domain.EditorControlerAdapter -->  DomainViewI.EditorControlerAdapter_EXC_I : use

Domain.EditorControlerAdapter -->  Domain.DirectoryNode : use
Domain.EditorControlerAdapter -->  Domain.FileNode : use
Domain.EditorControlerAdapter -->  Domain.StorageNode2 : use

Domain.FileNode --|>  Domain.StorageNode2 : exend
Domain.FileNode -->  DomainViewI.FileNode_EXC_I : impement

Domain.StorageNode2 --|>  technical.Observable : exend
Domain.StorageNode2 -->  technical.Observer : impement
Domain.StorageNode2 -->  DomainViewI.StorageNode2_EXC_I : impement


Domain.DirectoryNode --|>  Domain.StorageNode2 : exend
Domain.DirectoryNode -->  DomainViewI.DirectoryNode_EXC_I : impement
Domain.DirectoryNode -->  Domain.FileNode : impement

@enduml

